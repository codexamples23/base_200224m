package org.example.java02052024;

import java.util.Scanner;

public class Practice {
    public static void main(String[] args) {
        System.out.println(sumOfPowers(3));
    }

    public static int sumOfPowers(int n) {
        int sum = 0;
        for (int i = 1; i <= n; i++) {
            int power = 1;
            for (int j = 0; j < i; j++) {
                power *= 2;
            }
            sum += power;
        }
        return sum;
    }

    public static void printBox() {
        Scanner scanner = new Scanner(System.in);
        int h = scanner.nextInt();
        int w = scanner.nextInt();

        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {
                System.out.print("#");
            }
            System.out.println();
        }
    }
}

/*

цикл for:
По данному натуральному n вычислите сумму 1^2 + 2^2 + ... + n^2

Напишите программу, которая будет печатать коробку из #, принимая от пользователя
значения высоты и ширины.
Например:
Вход = 3, 3
Выход =
###
###
###

По данному натуральному n вычислите сумму 2^1 + 2^2 + ... + 2^n

В последовательности из n чисел нужно найти номер самого большого числа

Подсчитайте, сколько среди данных n чисел нулей, положительных чисел и отрицательных чисел.

Многие натуральные числа можно представить в виде n = 3*A + 5*B, где A и B -- целые неотрицательные числа.
Вам требуется по заданному числу определить, можно ли его представить в таком виде, и если это возможно, найти подходящие A и B.
В противном случае вывести -1 -1

 */

/*
цикл while:

Выведите все точные квадраты натуральных чисел, не превосходящие данного числа x

По данному числу n распечатайте все целые степени двойки, не превосходящие n, в порядке возрастания.

Определите сумму всех элементов последовательности, завершающейся числом 0
 */